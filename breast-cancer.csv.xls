{"metadata":{"kernelspec":{"name":"python3","display_name":"Python 3","language":"python"},"language_info":{"name":"python","version":"3.10.12","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":6059933,"sourceType":"datasetVersion","datasetId":3467766}],"dockerImageVersionId":30839,"isInternetEnabled":false,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# IMPORTING LIBRARIES \nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport numpy as np\nimport joblib","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-27T22:43:53.586752Z","iopub.execute_input":"2025-01-27T22:43:53.587101Z","iopub.status.idle":"2025-01-27T22:43:56.676542Z","shell.execute_reply.started":"2025-01-27T22:43:53.587073Z","shell.execute_reply":"2025-01-27T22:43:56.675419Z"}},"outputs":[],"execution_count":1},{"cell_type":"code","source":"# READING DATASET\nbreast_cancer_df=pd.read_csv('breast-cancer.csv.xls')\nbreast_cancer_df","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-27T22:43:56.677825Z","iopub.execute_input":"2025-01-27T22:43:56.678345Z","iopub.status.idle":"2025-01-27T22:43:56.852052Z","shell.execute_reply.started":"2025-01-27T22:43:56.678313Z","shell.execute_reply":"2025-01-27T22:43:56.847197Z"}},"outputs":[{"traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mFileNotFoundError\u001b[0m                         Traceback (most recent call last)","\u001b[0;32m<ipython-input-2-b9686eba56f9>\u001b[0m in \u001b[0;36m<cell line: 2>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;31m# READING DATASET\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m \u001b[0mbreast_cancer_df\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mpd\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mread_csv\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'breast-cancer.csv.xls'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      3\u001b[0m \u001b[0mbreast_cancer_df\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/io/parsers/readers.py\u001b[0m in \u001b[0;36mread_csv\u001b[0;34m(filepath_or_buffer, sep, delimiter, header, names, index_col, usecols, dtype, engine, converters, true_values, false_values, skipinitialspace, skiprows, skipfooter, nrows, na_values, keep_default_na, na_filter, verbose, skip_blank_lines, parse_dates, infer_datetime_format, keep_date_col, date_parser, date_format, dayfirst, cache_dates, iterator, chunksize, compression, thousands, decimal, lineterminator, quotechar, quoting, doublequote, escapechar, comment, encoding, encoding_errors, dialect, on_bad_lines, delim_whitespace, low_memory, memory_map, float_precision, storage_options, dtype_backend)\u001b[0m\n\u001b[1;32m   1024\u001b[0m     \u001b[0mkwds\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mupdate\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkwds_defaults\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1025\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1026\u001b[0;31m     \u001b[0;32mreturn\u001b[0m \u001b[0m_read\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfilepath_or_buffer\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mkwds\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1027\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1028\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/io/parsers/readers.py\u001b[0m in \u001b[0;36m_read\u001b[0;34m(filepath_or_buffer, kwds)\u001b[0m\n\u001b[1;32m    618\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    619\u001b[0m     \u001b[0;31m# Create the parser.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 620\u001b[0;31m     \u001b[0mparser\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mTextFileReader\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfilepath_or_buffer\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwds\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    621\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    622\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mchunksize\u001b[0m \u001b[0;32mor\u001b[0m \u001b[0miterator\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/io/parsers/readers.py\u001b[0m in \u001b[0;36m__init__\u001b[0;34m(self, f, engine, **kwds)\u001b[0m\n\u001b[1;32m   1618\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1619\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mhandles\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mIOHandles\u001b[0m \u001b[0;34m|\u001b[0m \u001b[0;32mNone\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1620\u001b[0;31m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_engine\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_make_engine\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mf\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mengine\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1621\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1622\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mclose\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m->\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/io/parsers/readers.py\u001b[0m in \u001b[0;36m_make_engine\u001b[0;34m(self, f, engine)\u001b[0m\n\u001b[1;32m   1878\u001b[0m                 \u001b[0;32mif\u001b[0m \u001b[0;34m\"b\"\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mmode\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1879\u001b[0m                     \u001b[0mmode\u001b[0m \u001b[0;34m+=\u001b[0m \u001b[0;34m\"b\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1880\u001b[0;31m             self.handles = get_handle(\n\u001b[0m\u001b[1;32m   1881\u001b[0m                 \u001b[0mf\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1882\u001b[0m                 \u001b[0mmode\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/io/common.py\u001b[0m in \u001b[0;36mget_handle\u001b[0;34m(path_or_buf, mode, encoding, compression, memory_map, is_text, errors, storage_options)\u001b[0m\n\u001b[1;32m    871\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mioargs\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mencoding\u001b[0m \u001b[0;32mand\u001b[0m \u001b[0;34m\"b\"\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mioargs\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmode\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    872\u001b[0m             \u001b[0;31m# Encoding\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 873\u001b[0;31m             handle = open(\n\u001b[0m\u001b[1;32m    874\u001b[0m                 \u001b[0mhandle\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    875\u001b[0m                 \u001b[0mioargs\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmode\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mFileNotFoundError\u001b[0m: [Errno 2] No such file or directory: 'breast-cancer.csv.xls'"],"ename":"FileNotFoundError","evalue":"[Errno 2] No such file or directory: 'breast-cancer.csv.xls'","output_type":"error"}],"execution_count":2},{"cell_type":"code","source":"# CHECKING FOR NULL VALUES\nbreast_cancer_df.isnull().sum()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-27T22:43:56.852686Z","iopub.status.idle":"2025-01-27T22:43:56.853117Z","shell.execute_reply":"2025-01-27T22:43:56.852926Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# CREATING DATAAFRAME WITH SELECTED FEATURES\nselected_columns=['area_worst','perimeter_worst','concave points_mean','concavity_mean','perimeter_mean','area_mean','area_se','radius_worst','concave points_worst','smoothness_worst','diagnosis']\nFeatured_df=breast_cancer_df[selected_columns]\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-27T22:43:56.853998Z","iopub.status.idle":"2025-01-27T22:43:56.854348Z","shell.execute_reply":"2025-01-27T22:43:56.854211Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"Featured_df","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-27T22:43:56.855451Z","iopub.status.idle":"2025-01-27T22:43:56.856071Z","shell.execute_reply":"2025-01-27T22:43:56.855834Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# CHECKING NULL VALUES IN NEW SELECTED FEATURES DATA FRAME\nFeatured_df.isnull().sum()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-27T22:43:56.857075Z","iopub.status.idle":"2025-01-27T22:43:56.857446Z","shell.execute_reply":"2025-01-27T22:43:56.857308Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# CHECKING ALL FEATURES MATHIMATICAL \nFeatured_df.describe()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-27T22:43:56.858479Z","iopub.status.idle":"2025-01-27T22:43:56.859079Z","shell.execute_reply":"2025-01-27T22:43:56.858871Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"\ncorr_relation=Featured_df.corr()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-27T22:43:56.860532Z","iopub.status.idle":"2025-01-27T22:43:56.861008Z","shell.execute_reply":"2025-01-27T22:43:56.860804Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# VISUALIZATION OF COO RELATION \nsns.heatmap(corr_relation,cmap='viridis',linewidths=4)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-27T22:43:56.862004Z","iopub.status.idle":"2025-01-27T22:43:56.862559Z","shell.execute_reply":"2025-01-27T22:43:56.862308Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# CHECKING FOR OUTLERS \nplt.figure(figsize=(20,6))\nsns.boxplot(data=Featured_df)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-27T22:43:56.863920Z","iopub.status.idle":"2025-01-27T22:43:56.864411Z","shell.execute_reply":"2025-01-27T22:43:56.864202Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"grouby=Featured_df.groupby('diagnosis')['area_worst'].count()\nplt.pie(grouby.values,labels=grouby.index)\nplt.show()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-27T22:43:56.865302Z","iopub.status.idle":"2025-01-27T22:43:56.865806Z","shell.execute_reply":"2025-01-27T22:43:56.865604Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"sns.pairplot(data=Featured_df)\nplt.show()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-27T22:43:56.866725Z","iopub.status.idle":"2025-01-27T22:43:56.867194Z","shell.execute_reply":"2025-01-27T22:43:56.866992Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"plt.figure(figsize=(20,6))\nsns.barplot(data=Featured_df)\nplt.show()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-27T22:43:56.868249Z","iopub.status.idle":"2025-01-27T22:43:56.868743Z","shell.execute_reply":"2025-01-27T22:43:56.868541Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# VIOLIN PLOT \nplt.violinplot(Featured_df['area_worst'],showmeans=True)\nplt.show()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-27T22:43:56.870100Z","iopub.status.idle":"2025-01-27T22:43:56.870606Z","shell.execute_reply":"2025-01-27T22:43:56.870360Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# HANDLING OUTLIERS \n# Calculate the lower and upper bounds for the selected columns\nlower_bound = Featured_df[['area_worst', 'area_mean', 'perimeter_worst', 'area_se', 'perimeter_mean']].quantile(0.05)\nupper_bound = Featured_df[['area_worst', 'area_mean', 'perimeter_worst', 'area_se', 'perimeter_mean']].quantile(0.95)\n\n# Cap values outside the bounds\nFeatured_df[['area_worst', 'area_mean', 'perimeter_worst', 'area_se', 'perimeter_mean']] = Featured_df[\n    ['area_worst', 'area_mean', 'perimeter_worst', 'area_se', 'perimeter_mean']\n].clip(lower=lower_bound, upper=upper_bound,axis=1)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-27T22:43:56.871229Z","iopub.status.idle":"2025-01-27T22:43:56.871586Z","shell.execute_reply":"2025-01-27T22:43:56.871418Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# AFTER HANDLING OUTLIERS CHECKING AGAIN \nplt.figure(figsize=(30,6))\nsns.boxplot(data=Featured_df)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-27T22:43:56.872355Z","iopub.status.idle":"2025-01-27T22:43:56.872697Z","shell.execute_reply":"2025-01-27T22:43:56.872568Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"Featured_df.columns","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-27T22:43:56.873378Z","iopub.status.idle":"2025-01-27T22:43:56.873710Z","shell.execute_reply":"2025-01-27T22:43:56.873583Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# VISUALING BAR PLOT\n\nplt.figure(figsize=(25,6))\nsns.barplot(data=Featured_df)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-27T22:43:56.874656Z","iopub.status.idle":"2025-01-27T22:43:56.874952Z","shell.execute_reply":"2025-01-27T22:43:56.874825Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"Featured_df","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-27T22:43:56.876089Z","iopub.status.idle":"2025-01-27T22:43:56.876511Z","shell.execute_reply":"2025-01-27T22:43:56.876279Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# CONVERTING TARGET FEARURES INTO BINARY \nfrom sklearn.preprocessing import LabelEncoder\nLB=LabelEncoder()\nFeatured_df['diagnosis']=LB.fit_transform(Featured_df['diagnosis'])","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-27T22:43:56.877666Z","iopub.status.idle":"2025-01-27T22:43:56.878049Z","shell.execute_reply":"2025-01-27T22:43:56.877863Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# SELECTING FEATURES FOR X AND Y \nX=Featured_df.drop('diagnosis',axis=1)\nY=Featured_df['diagnosis']","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-27T22:43:56.878926Z","iopub.status.idle":"2025-01-27T22:43:56.879237Z","shell.execute_reply":"2025-01-27T22:43:56.879110Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"Featured_df","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-27T22:43:56.880093Z","iopub.status.idle":"2025-01-27T22:43:56.880508Z","shell.execute_reply":"2025-01-27T22:43:56.880268Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# SPLITING THE DATASET INTO TRAIN AND TEST \nfrom sklearn.model_selection import train_test_split\nX_TRAIN,X_TEST,Y_TRAIN,Y_TEST=train_test_split(X,Y, test_size=0.2,random_state=10)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-27T22:43:56.881469Z","iopub.status.idle":"2025-01-27T22:43:56.881854Z","shell.execute_reply":"2025-01-27T22:43:56.881719Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# NORMALIZATION OF DATASET \nfrom sklearn.preprocessing import StandardScaler\nsc=StandardScaler()\nX_TRAIN=sc.fit_transform(X_TRAIN)\nX_TEST=sc.transform(X_TEST)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-27T22:43:56.882952Z","iopub.status.idle":"2025-01-27T22:43:56.883385Z","shell.execute_reply":"2025-01-27T22:43:56.883158Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# IMPLEMENTING LOGISTIC REGRESSION MODEL \nfrom sklearn.linear_model import LogisticRegression\nmodel_LG=LogisticRegression(random_state=10)\nmodel_LG.fit(X_TRAIN,Y_TRAIN)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-27T22:43:56.884407Z","iopub.status.idle":"2025-01-27T22:43:56.884778Z","shell.execute_reply":"2025-01-27T22:43:56.884642Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# PREDICTING OF X_TEST\n\n\nLG_pred=model_LG.predict(X_TEST)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-27T22:43:56.885468Z","iopub.status.idle":"2025-01-27T22:43:56.885800Z","shell.execute_reply":"2025-01-27T22:43:56.885674Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# COMPUTING ACCURACY SCORE , CONFUSION MATRIX , CLASSIFICATION REPORT OF LOGISRIC REGRESSION \nfrom sklearn.metrics import accuracy_score,classification_report,confusion_matrix,ConfusionMatrixDisplay\n\nCM_LG=confusion_matrix(Y_TEST,LG_pred)\nACCURACY_SCORE_LG=accuracy_score(Y_TEST,LG_pred)\nPERC_ASCORE =ACCURACY_SCORE_LG*100\nREPORT_LG=classification_report(Y_TEST,LG_pred)\n\n\nprint(f'THE CONFUSION MATRIX FOR LOGISTIC REGRESSION IS {CM_LG}')\nprint(f'THE ACCURACY SCORE OF LOGISTIC REGRESSION IS {PERC_ASCORE}%')\nprint(f'THE CLASSFICATION REPORT IS FOR LOGISTIC REGRESSION IS {REPORT_LG}')\n\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-27T22:43:56.886976Z","iopub.status.idle":"2025-01-27T22:43:56.887351Z","shell.execute_reply":"2025-01-27T22:43:56.887217Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# CROSS VALIDAITON OF LOGISTIC REGRESSION \n\nfrom sklearn.model_selection import cross_val_score\ncross_val_lg=cross_val_score(estimator=model_LG,X=X_TRAIN,y=Y_TRAIN,cv=10)\nperc_cross_lg=format(cross_val_lg.mean())\nprint(f'THE CROSS VALIDATION FOR LOGISTICS REGRESSION IS {perc_cross_lg}%')","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-27T22:43:56.888559Z","iopub.status.idle":"2025-01-27T22:43:56.888960Z","shell.execute_reply":"2025-01-27T22:43:56.888787Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# VISUALAZTION OF CONFUSION MATRIX \n\ndisplay_LG=ConfusionMatrixDisplay(confusion_matrix=CM_LG, display_labels=model_LG.classes_)\ndisplay_LG.plot()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-27T22:43:56.889974Z","iopub.status.idle":"2025-01-27T22:43:56.890319Z","shell.execute_reply":"2025-01-27T22:43:56.890179Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# PLOTING ROC_CURVE FOR LOGISTIC REGRESSION \n\nfrom sklearn.metrics import roc_curve,auc\nY_pred_proba_LG=model_LG.predict_log_proba(X_TEST)[:,1]\nfpr,tpr, threshold=roc_curve(Y_TEST,Y_pred_proba_LG)\nprint(f'THE FALSE POSITIVE RATES ARE {fpr}, THE TRUE POSTIVE RATES ARE {tpr}')\n\nAUC=auc(fpr,tpr)*100\nprint(f'THE AUC SCORE IS {AUC}')\nplt.figure(figsize=(12,5))\nplt.plot(fpr,tpr, label='ROC CURVE', color='RED')\nplt.plot([0,1],[0,1],color='blue',label='GUESS')\nplt.xlim([0.0,1.0])\nplt.ylim([0.0,1.2])\nplt.xlabel('FALSE POSTIVE RATES')\nplt.ylabel(\"TRUE POSTITIVE RATES\")\nplt.legend(loc='lower right')\nplt.title(\"THE ROC CURVE FOR DECSION TREE\")\nplt.grid(True)\nplt.show()\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-27T22:43:56.891049Z","iopub.status.idle":"2025-01-27T22:43:56.891362Z","shell.execute_reply":"2025-01-27T22:43:56.891233Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# IMPLEMENTING DECSION TREE CLASSIFIER \n\nfrom sklearn.tree import DecisionTreeClassifier\nmodel_DT=DecisionTreeClassifier(criterion='entropy',max_depth=4,min_samples_split=5,min_samples_leaf=4, random_state=10)\nmodel_DT.fit(X_TRAIN,Y_TRAIN)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-27T22:43:56.892289Z","iopub.status.idle":"2025-01-27T22:43:56.892672Z","shell.execute_reply":"2025-01-27T22:43:56.892472Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# PREDICTING OF X_TEST\nY_pred_DT=model_DT.predict(X_TEST)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-27T22:43:56.893769Z","iopub.status.idle":"2025-01-27T22:43:56.894263Z","shell.execute_reply":"2025-01-27T22:43:56.894082Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# COMPUTING ACCURACY SCORE , CONFUSION MATRIX , CLASSIFICATION REPORT OF  DECISON TREE CLASSIFIER \nfrom sklearn.metrics import confusion_matrix, accuracy_score,classification_report,ConfusionMatrixDisplay\nCM_DT=confusion_matrix(Y_TEST,Y_pred_DT)\nACCURACY_SCORE_DT=accuracy_score(Y_TEST,Y_pred_DT)\nnew_AC=ACCURACY_SCORE_DT*100\nreport_DT=classification_report(Y_TEST,Y_pred_DT)\n\nprint(f'THE CONFUSION MATRIX 0F DECSION TREE IS {CM_DT}')\nprint(f'THE ACCUCARY SCORE OF DECSIOON TREE IS {new_AC}%')\nprint(f'THE CLASSIFICATION REPORT OF DECSION TREE IS {report_DT}')","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-27T22:43:56.895458Z","iopub.status.idle":"2025-01-27T22:43:56.895906Z","shell.execute_reply":"2025-01-27T22:43:56.895717Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"#  CROSS VALIDATION OF DECISON TREE CLASSIFIER \n\nfrom sklearn.model_selection import cross_val_score\ncross_DT=cross_val_score(estimator=model_DT,X=X_TRAIN,y=Y_TRAIN,cv=10)\nnew_CV=format(cross_DT.mean()*100)\nprint(f'THE CROOS VALIDATION IS FOR DECSION TREE IS {new_CV}%')","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-27T22:43:56.897333Z","iopub.status.idle":"2025-01-27T22:43:56.897843Z","shell.execute_reply":"2025-01-27T22:43:56.897676Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# VISULAZTION OF DECISON TREE CLASSIFIER \n\nfrom sklearn.tree import plot_tree\nplt.figure(figsize=(12,8))\nplot_tree(model_DT,filled=True,class_names=['NO','YES'],feature_names=X.columns)\nplt.title('THE DECISION TREE ')\nplt.show()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-27T22:43:56.898965Z","iopub.status.idle":"2025-01-27T22:43:56.899369Z","shell.execute_reply":"2025-01-27T22:43:56.899196Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"#  ROC CURVE FOR DECISON TREE CLASSIFIER \n\n\nfrom sklearn.metrics import roc_curve,auc\nY_pred_proba_DT=model_DT.predict_proba(X_TEST)[:,1]\nfpr,tpr, threshold=roc_curve(Y_TEST,Y_pred_proba_DT)\nprint(f'THE FALSE POSITIVE RATES ARE {fpr}, THE TRUE POSTIVE RATES ARE {tpr}')\n\nAUC=auc(fpr,tpr)\nprint(f'THE AUC SCORE IS {AUC}')\nplt.figure(figsize=(12,5))\nplt.plot(fpr,tpr, label='ROC CURVE', color='RED')\nplt.plot([0,1],[0,1],color='blue',label='GUESS')\nplt.xlim([0.0,1.0])\nplt.ylim([0.0,1.2])\nplt.xlabel('FALSE POSTIVE RATES')\nplt.ylabel(\"TRUE POSTITIVE RATES\")\nplt.legend(loc='lower right')\nplt.title(\"THE ROC CURVE FOR DECSION TREE\")\nplt.grid(True)\nplt.show()\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-27T22:43:56.900457Z","iopub.status.idle":"2025-01-27T22:43:56.900867Z","shell.execute_reply":"2025-01-27T22:43:56.900704Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# IMPLEMENTING RANDOM FOREST CLASSIFIER USING GRID SERACH CV\n\nfrom sklearn.ensemble import RandomForestClassifier\nmodel_RF=RandomForestClassifier()\nfrom sklearn.model_selection import GridSearchCV\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-27T22:43:56.901725Z","iopub.status.idle":"2025-01-27T22:43:56.902248Z","shell.execute_reply":"2025-01-27T22:43:56.902109Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"","metadata":{}},{"cell_type":"code","source":"paramters_grid={'n_estimators':[100,200],\n                'max_depth':[5,6],\n                \"min_samples_split\":[6,7],\n                \"min_samples_leaf\":[4,5]}\n\n\ngrid_serach_mode=GridSearchCV(estimator=model_RF,param_grid=paramters_grid,cv=10,verbose=2,n_jobs=2)\n\ngrid_serach_mode.fit(X_TRAIN,Y_TRAIN)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-27T22:43:56.903280Z","iopub.status.idle":"2025-01-27T22:43:56.903692Z","shell.execute_reply":"2025-01-27T22:43:56.903472Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"print(f\"THE BEST PARAMETERS ARE {grid_serach_mode.best_params_}\")\nprint(f'THE BEST ESTIMATORE ARE {grid_serach_mode.best_estimator_}')\n\nACCURACY_SCORE_RF_GS=accuracy_score(Y_TEST,grid_serach_mode.predict(X_TEST))*100","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-27T22:43:56.904709Z","iopub.status.idle":"2025-01-27T22:43:56.905115Z","shell.execute_reply":"2025-01-27T22:43:56.904926Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# CROSS VALIDATION OF RANDOM FOREST \n\nfrom sklearn.model_selection import cross_val_score\ncrosS_rf_gS=cross_val_score(estimator=model_DT,X=X_TRAIN,y=Y_TRAIN,cv=5)\nneW_cv_g_=format(crosS_rf_gS.mean()*100)\n\nprint(F'THE CROSS VALIDATION OF RANDOM FOREST IS {neW_cv_g_}%')","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-27T22:43:56.905865Z","iopub.status.idle":"2025-01-27T22:43:56.906273Z","shell.execute_reply":"2025-01-27T22:43:56.906127Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# IMPLEMENTING KNN \nfrom sklearn.neighbors import KNeighborsClassifier\nmodel_K=KNeighborsClassifier(n_neighbors=5,metric='minkowski',p=2)\nmodel_K.fit(X_TRAIN,Y_TRAIN)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-27T22:43:56.907135Z","iopub.status.idle":"2025-01-27T22:43:56.907453Z","shell.execute_reply":"2025-01-27T22:43:56.907326Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"y_Pred_k=model_K.predict(X_TEST)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-27T22:43:56.908255Z","iopub.status.idle":"2025-01-27T22:43:56.908608Z","shell.execute_reply":"2025-01-27T22:43:56.908427Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"from sklearn.metrics import confusion_matrix, accuracy_score,classification_report,ConfusionMatrixDisplay\nCM_K=confusion_matrix(Y_TEST,y_Pred_k)\nAS=accuracy_score(Y_TEST,y_Pred_k)\nnew_as=AS*100\nREPORT_K=classification_report(Y_TEST,y_Pred_k)\n\nprint(f'THE CONFUSIN MATRIX FOR K NEREAST NEIGHBOUT IS {CM_K}')\nprint(F'THE ACCURACY SCORE FOR K NEAREST NEIGHTBOR IS {new_as}%')\nprint(F'THE CLASSIFICATION REPORT  K NEREAST IS {REPORT_K}')","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-27T22:43:56.909693Z","iopub.status.idle":"2025-01-27T22:43:56.910123Z","shell.execute_reply":"2025-01-27T22:43:56.909925Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# CROSS VALIDATION OF KNN\n\nfrom sklearn.model_selection import cross_val_score\nk_cross=cross_val_score(model_K,X=X_TRAIN,y=Y_TRAIN,cv=10)\nnew_k_cv=format(k_cross.mean()*100)\nprint(f'THE CROSS VADLIDATION FOR K NEREAST IS {new_k_cv}')","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-27T22:43:56.910831Z","iopub.status.idle":"2025-01-27T22:43:56.911200Z","shell.execute_reply":"2025-01-27T22:43:56.911064Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# ROC CURVE FOR KNN MODEL\n\nfrom sklearn.metrics import roc_curve\nY_pred_proba_k=model_K.predict_proba(X_TEST)[:,1]\nfpr,tpr,threshold=roc_curve(Y_TEST,Y_pred_proba_k)\n\nplt.plot(fpr,tpr,color='red',label='ROC CURVE')\nplt.plot([0,1],[0,1],color='blue',label='GUESS RANDOM')\nplt.xlim([0.0,1.0])\nplt.ylim([0.0,1.2])\nplt.xlabel('THE FALSE POSTIVE RATES')\nplt.ylabel('THE TRUE POSTIVE RATES')\nplt.title('THE ROC CURVE FOR K NEREAST ')\nplt.grid(True)\nplt.legend(loc='lower right')\nplt.show()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-27T22:43:56.912260Z","iopub.status.idle":"2025-01-27T22:43:56.912663Z","shell.execute_reply":"2025-01-27T22:43:56.912476Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# CREATING TABLE FOR  BEST ACCURACY SCORE \nMODED_SELECTION_DF=pd.DataFrame({'MODELS':['LogisticRegression','DecisionTreeClassifier','RandomForestClassifier','KNeighborsClassifier'\n                                           ],\n                                 'ACCURACY SCORE':[PERC_ASCORE,new_AC,ACCURACY_SCORE_RF_GS,new_as]})\n\n\nMODED_SELECTION_DF.sort_values(by='ACCURACY SCORE',ascending=True)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-27T22:43:56.913483Z","iopub.status.idle":"2025-01-27T22:43:56.913897Z","shell.execute_reply":"2025-01-27T22:43:56.913738Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"Featured_df.columns\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-27T22:43:56.914835Z","iopub.status.idle":"2025-01-27T22:43:56.915201Z","shell.execute_reply":"2025-01-27T22:43:56.915069Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# TAKING INPUT FROM USER \n\narea_worst = float(input('ENTER area_worst: '))\nperimeter_worst = float(input('ENTER perimeter_worst: '))\nconcave_points_mean = float(input('ENTER concave_points_mean: '))\nconcavity_mean = float(input('ENTER concavity_mean: '))\nperimeter_mean = float(input('ENTER perimeter_mean: '))\narea_se = float(input('ENTER area_se: '))\narea_mean = float(input('ENTER area_mean: '))\nradius_worst = float(input('ENTER radius_worst: '))\nconcave_points_worst = float(input('ENTER concave_points_worst: '))\nsmoothness_worst = float(input('ENTER smoothness_worst: '))\n\n# CONVERTING INPUT INTO 2-D ARRAY \n\ninput_entries = np.array([[\n    area_worst, \n    perimeter_worst, \n    concave_points_mean, \n    concavity_mean, \n    perimeter_mean, \n    area_mean, \n    area_se, \n    radius_worst, \n    concave_points_worst, \n    smoothness_worst\n]])\n\n\n\n\ninput_df=pd.DataFrame({'AREA WORST': [area_worst],\n      'PERIMETER WORST': [perimeter_worst],\n      'Concave Points Mean':[concave_points_mean],\n      'Concavitymean':[concavity_mean],\n      'Perimeter Mean':[perimeter_mean],\n      'Area Mean':[area_mean],\n      'Area Se': [area_se],\n      'Radius Worst':[radius_worst],\n      'Concave Points Worst':[concave_points_worst],\n      'Smoothness Worst':[smoothness_worst]})\n\n\n# SCALIING INPUT \noutput =sc.transform(input_entries)\n\n# USING RANDOM FOREST FOR PREDICTION \n\nfinal=grid_serach_mode.predict(output)\n\n# Transform The output \n\nnew_final=LB.inverse_transform(final)\n\nif new_final[0]=='M':\n    print(f'THE DIAGNOSIS IS MALIGNANT CONSULT A DOCTOR IMMEDIEATLIY')\n    \nelif new_final[0]=='B':\n    print('THE DIAGNOSIS IS BENIGN  AND IS IS SAFE')\n    \nelse:\n    print('invalid inputs')\ninput_df\n\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-27T22:43:56.916045Z","iopub.status.idle":"2025-01-27T22:43:56.916441Z","shell.execute_reply":"2025-01-27T22:43:56.916253Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null}]}